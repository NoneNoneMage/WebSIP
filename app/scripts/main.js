/*
*Copyright (c) 2013 Thomas Falkenberg.
*All rights reserved. This program and the accompanying materials
*are made available under the terms of the GNU Public License v3.0
*which accompanies this distribution, and is available at
*http://www.gnu.org/licenses/gpl.html
*
*Contributors:
*    Thomas Falkenberg - initial API and implementation
*    Deutsche Telekom AG- Telekom Laboratories Darmstadt
*/

// Generated by CoffeeScript 1.3.3
/*global require
*/

/*
https://github.com/jrburke/requirejs/tree/dev2.0
https://github.com/jrburke/requirejs/wiki/Requirejs-2.0-draft
*/
function log(msg) {
	var debug=true;
    if (typeof console != "undefined" && debug)
        console.log(msg);
}

function checkBrowserName(name){  
	   var agent = navigator.userAgent.toLowerCase();  
	   if (agent.indexOf(name.toLowerCase())>-1) {  
		 
	     return true;  
	   }  
	   return false;  
}  
var CALL_TAB="Call";
var CHAT_TAB="Chat";
var CONTACTS_TAB="Contacts";
var EXTRAS_TAB="Extras";
var CALL="Call";
var DECLINE="Decline";
var REGISTER="Register";
var UNREGISTER="unregister";
var NEW_MESSAGE="New Message:";
var TO="to";
var SEND="send";
var USERNAME="Username: ";
var USER="User: ";
var PASSWORD="Password";
var SOCKET="Socket: ";
var REGISTERED="Registered: ";

	
	
require({
  shim: {
    'libs/angular': {
      deps: ['libs/modernizr'],
      exports: 'angular'
    },
    'libs/angular-resource': ['libs/angular'],
    'libs/modernizr': {
      exports: 'Modernizr'
    },
    
  }
}, ['app', 'libs/angular','scripts/libs/md5.js','scripts/sipjs/sip.js', 'controllers/Media','controllers/SipConnection','controllers/Chat','controllers/Call','controllers/CallProtocol','controllers/Contact'], function(app) {
  'use strict';
  app.config([
    '$routeProvider', function($routeProvider) {
    $routeProvider.when('/call', {templateUrl: 'scripts/partials/call.html'}).
    when('/chat', {templateUrl: 'scripts/partials/chat.html'}).
    when('/contact', {templateUrl: 'scripts/partials/contact.html'}).
    when('/callProtocol', {templateUrl: 'scripts/partials/callProtocol.html'}).
    otherwise({redirectTo: '/call'});
    }
  ]);
  return app.run([
    '$rootScope', function($rootScope) {
    	
      $rootScope.$on('error:unauthorized', function(event, response) {});
      $rootScope.$on('success:ok', function(event, response) {});
      return $rootScope.$on('$afterRouteChange', function(event, currentRoute, priorRoute) {
        return $rootScope.$emit("" + currentRoute.controller + "$afterRouteChange", currentRoute, priorRoute);
      });
    }
  ]);
});
