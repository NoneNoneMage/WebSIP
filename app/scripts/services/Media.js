/*
*Copyright (c) 2013 Thomas Falkenberg.
*All rights reserved. This program and the accompanying materials
*are made available under the terms of the GNU Public License v3.0
*which accompanies this distribution, and is available at
*http://www.gnu.org/licenses/gpl.html
*
*Contributors:
*    Thomas Falkenberg - initial API and implementation
*    Deutsche Telekom AG- Telekom Laboratories Darmstadt
*/

// Generated by CoffeeScript 1.3.3
/*global define
*/

define(['services/services','services/sharedScope'], function(services) {
  'use strict';
  return services.factory('Media', [
    	'$rootScope','sharedScope',function($rootScope,sharedScope){
    		
    		function Media() {
    			
    			this.type="AV";
    			this.stream=null;
    			this.src='';
    			this.isLocal=true;
    			var that =this;
    						
    			this.setSrc=function(){
//    				if(that.type=="AV" && that.stream!=null){
    				if(that.stream!=null){
//    					that.src=webkitURL.createObjectURL(that.stream);
//    				if (window.URL) {
//                    	 //that.src=window.URL.createObjectURL(that.stream);
//    				}else 
    					if (webkitURL){
                             that.src=webkitURL.createObjectURL(that.stream);
                         }
                     else {
                             throw new Error("Browser does not appear to be WebRTC-capable");
                     }

    					
    					
    				}else{
    					that.src='';
    				}
    				$rootScope.$apply();
    			
    			};
    			this.getLocalMedia = function() {
    				if(that.isLocal){
	    				if (navigator.mozGetUserMedia) {
	  					navigator.mozGetUserMedia(that.getType(), that.setStream,that.userMediaError); 
	
	    				} else if (navigator.webkitGetUserMedia) {
	    					navigator.webkitGetUserMedia(that.getType(), that.setStream,that.userMediaError); 
	
	    				} else {
	    					throw new Error("Browser does not appear to be WebRTC-capable");
	    				}
    				}

				};
				this.userMediaError = function (e) {
					sharedScope.error=e;

    				$rootScope.$apply();
				};
    			this.setStream= function  (setStream) {
    				that.stream= setStream;
    				if(sharedScope.error.message=="Allow use of Media")sharedScope.error=null;
    				that.setSrc();
    			};
    			this.setStreamByEvent=function(streamEvent){
    				that.setStream(streamEvent.stream);
    			};
    			this.removeStream=function(){
    				that.stream= null;
    				that.setSrc();
    			};
    			this.getPeerType= function() {
    				switch (that.type) {
    				case "AV":
    					return { 'mandatory':
    			        {
    			            'OfferToReceiveAudio': true,
    			            'OfferToReceiveVideo': true
    			        }
    			    };//{has_audio:true, has_video:true};
    					break;
    				case "A":
    					return { 'mandatory':
    			        {
    			            'OfferToReceiveAudio': true,
    			            'OfferToReceiveVideo': false
    			        }
    			    };//{has_audio:true, has_video:false};
    					break;

    				default:
    					throw new Error("Wrong Media.type");
    					break;
    				}
				};
    			this.getType =function(){
    				switch (that.type) {
    				case "AV":
    					return {audio:true, video:true};
    					break;
    				case "A":
    					return {audio:true, video:false};
    					break;

    				default:
    					throw new Error("Wrong Media.type");
    					break;
    				}
    			};
    		};
    		
    		return Media;
    	}
  ]);
});
