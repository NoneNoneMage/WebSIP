/*
*Copyright (c) 2013 Thomas Falkenberg.
*All rights reserved. This program and the accompanying materials
*are made available under the terms of the GNU Public License v3.0
*which accompanies this distribution, and is available at
*http://www.gnu.org/licenses/gpl.html
*
*Contributors:
*    Thomas Falkenberg - initial API and implementation
*    Deutsche Telekom AG- Telekom Laboratories Darmstadt
*/

// Generated by CoffeeScript 1.3.3
/*global define
*/

define(['services/services'], function(services) {
  'use strict';
  return services.factory('sharedScope', [function(){
    		
    		
    		var sharedScope= {};
    		
    		sharedScope.IDLE="idle";
    		sharedScope.WAITING="waiting";
    		sharedScope.PREPARING="preparing";
    		sharedScope.INVITING="inviting";
    		sharedScope.RINGBACK="ringback";
    		sharedScope.SENT="sent";
    		sharedScope.CONNECTED="connected";
    		sharedScope.ACCEPTED="accepted";
    		sharedScope.ACTIVE="active";
    		sharedScope.MISSED="missed";
    		sharedScope.INCOMING="incoming";
    		sharedScope.ACCEPTING="accepting";
    		sharedScope.FAILED="failed";
    		sharedScope.CLOSED="closed";
    		sharedScope.CLOSING="closing";
    		sharedScope.CANCELED="canceled";
    		sharedScope.CANCELING="canceling";
    		sharedScope.DECLINED="declined";
    		sharedScope.CREATING="creating";
    		sharedScope.NOTREGISTERED="not registered";
    		sharedScope.REGISTERED="registered";
    		sharedScope.UNREGISTERING="unregistering";
    		sharedScope.REGISTERING="registering";
    		sharedScope.BOUND="bound";
    		sharedScope.OUTGOING="outgoing";
    		
    		sharedScope.medias=new Array();
    		sharedScope.calls=new Array();

    		sharedScope.contacts=new Array();
    		sharedScope.connection={};
    		sharedScope.friendlist=new Array();
    		sharedScope.chats= new Array();
    		sharedScope.error="";
    		sharedScope.registration=null;
    		
    		sharedScope.createMedia = function(isLocal,type) {
    			if (sharedScope.Media === undefined){
    				throw new Error("no Media-Service");
    			}
    			var media =new sharedScope.Media();
    			media.isLocal=isLocal;
    			media.type=type;
    			media.getLocalMedia();
    				
    			
    			sharedScope.medias.push(media);
    			return media;
			};
    		sharedScope.removeMedia = function(mediaToDelete){
    			for ( var int = 0; int < sharedScope.medias.length; int++) {
					var media = sharedScope.medias[int];
					if (media==mediaToDelete){
						sharedScope.medias.splice(int,1);
						};
				};
    		};
    		
    		sharedScope.getChat = function(uri) {
				 for ( var int = 0; int < sharedScope.chats.length; int++) {
					if( uri==sharedScope.chats[int].partner){
						return sharedScope.chats[int];
					};
					
				 }
				 return null;
			};
    		sharedScope.createChat=function(uri){
    			if (sharedScope.Chat === undefined){
    				throw new Error("no Chat-Service");
    			}
    			if(!uri||uri=="sip:")return;
    			if(uri.indexOf("@")==-1){uri+="@"+sharedScope.registration.domain;}
    			if (sharedScope.getChat(uri)===null){
    				sharedScope.chats.push( new sharedScope.Chat(uri));
    				
    			}
    			
    			return sharedScope.getChat(uri);
			    
    			    			
    		};
    		sharedScope.createRegistration=function(){
    			if (sharedScope.Registration === undefined){
    				throw new Error("no Registration-Service");
    			}
    			if (sharedScope.registration===null){
    				sharedScope.registration = new sharedScope.Registration();
    			}
    			
    			return sharedScope.registration;
			    
    			    			
    		};
    		sharedScope.endAllCalls = function() {
    			for ( var int = 0; int < sharedScope.calls.length; int++) {
    				if(	   sharedScope.calls[int].state != sharedScope.FAILED 
    					&& sharedScope.calls[int].state != sharedScope.CLOSED
    					&& sharedScope.calls[int].state != sharedScope.CANCELED
    					&& sharedScope.calls[int].state != sharedScope.DECLINED){
    						sharedScope.calls[int].end();
					}
    			}
			}
    		sharedScope.getCall =function(to,callType){
    		
    			if (sharedScope.Call === undefined){
    				throw new Error("no Call-Service");
    			}
    			if(sharedScope.createRegistration().state!=sharedScope.REGISTERED)
    				{
    				throw new Error("UA is not registered");
    				}
    			var call=null;
    			for ( var int = 0; int < sharedScope.calls.length; int++) {
    				if(	sharedScope.calls[int].partner == to && sharedScope.calls[int].isNotEnded()){
    					
    					call = sharedScope.calls[int];
					}
					
				}
    			if (!call){
    				call =new sharedScope.Call(sharedScope.connection.stack,sharedScope.connection.local_aor(),to);
    				sharedScope.calls.push(call);	
    			}
    			if(callType){call.type=callType;}
    			return call;
    		};
    		
			sharedScope.stateClass = function() {
				return (sharedScope.registration.state==sharedScope.REGISTERED) ? sharedScope.REGISTERED: "";
			}
			
    		sharedScope.getCurrentCall = function(){
    			for ( var int = 0; int < sharedScope.calls.length; int++) {
    				if(	 sharedScope.calls[int].isNotEnded()){
    						return sharedScope.calls[int];
					}
    			}
    			return null;
    		};
    	
    		sharedScope.newEmptyContact = function(to) {
    			
    			if(!to){return;}
    			if(to.indexOf("@")==-1){to+="@"+sharedScope.registration.domain;}
    			if(!sharedScope.getContact(to)){
	    			sharedScope.newContact("","",to);
    			}
    			
			};
			
			sharedScope.getContact = function(to) {
    			if (sharedScope.Contact === undefined){
    				throw new Error("no Contact-Service");
    			}
    			var contact=null;
    			for ( var int = 0; int < sharedScope.contacts.length; int++) {
    				if(	sharedScope.contacts[int].sip == to){
    					
    					contact = sharedScope.contacts[int];
					}
					
				}
    			return contact;
    			
			};
			
			sharedScope.newContact = function(name,surname,sip,imgURL) {
				var contact=null;
				var deleteIndex;
    			for ( var int = 0; int < sharedScope.contacts.length; int++) {
    				if(	sharedScope.contacts[int].sip == sip){
    					
    					contact = sharedScope.contacts[int];
    					deleteIndex=int;
					}
					
				}
    			
    			if(contact){
    				sharedScope.contacts.splice(deleteIndex,1);
    			}
    				sharedScope.contacts.push(new sharedScope.Contact(name,surname,sip,imgURL));
    			
			};
    		
    		sharedScope.getLocalMedia = function() {
    			for ( var int = 0; int < sharedScope.medias.length; int++) {
					var media = sharedScope.medias[int];
					if (media.isLocal){return media;};
				}
    			sharedScope.createMedia(true,"A");
    			return sharedScope.getLocalMedia();
    		};
    		return sharedScope;
    	}
  ]);
});
