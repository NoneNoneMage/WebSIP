/*
*Copyright (c) 2013 Thomas Falkenberg.
*All rights reserved. This program and the accompanying materials
*are made available under the terms of the GNU Public License v3.0
*which accompanies this distribution, and is available at
*http://www.gnu.org/licenses/gpl.html
*
*Contributors:
*    Thomas Falkenberg - initial API and implementation
*    Deutsche Telekom AG- Telekom Laboratories Darmstadt
*/

// Generated by CoffeeScript 1.3.3
/*global define
*/

define(['services/services','services/sharedScope'], function(services) {
  'use strict';
  return services.factory('Chat', [
    	'$rootScope','sharedScope',function($rootScope,sharedScope){
    		
    		function Chat(uri) {
    			this.partner=uri;
    			this.messages= new Array();
    			var that =this;
    			this.push= function(msg){
    				msg.date=new Date();
    				msg.state=sharedScope.WAITING;
    				that.messages.push(msg);
    				
    			};
    			this.getMessage = function(msg) {
    				 //get Message by to, from, Contact, Call-ID,Content-Length, Content-Type and Body
    			    for ( var i = 0; i < that.messages.length; i++) {
						if(that.messages[i].compare(msg)){
							return that.messages[i];
						}
					}
    			    that.push(msg);
    			    return msg;
    				
				};
				
				this.sendPendingMessages =function(){
					
						for ( var j in chat.messages) {
							var message=chat.messages[j];
							if(message.state==sharedScope.FAILED){
								var  ua = new sip.UserAgent(that.stack);
	    				        ua.remoteParty = new sip.Address(chat.partner);
	    				        ua.localParty = new sip.Address(that.local_aor());
	    				            ua.routeSet = [sharedScope.registration.getRouteHeader()];
	    				        ua.sendRequest(message);
    				        }
						}
					
				};
    			
				
				
				this.sendMessage = function(text,to, ua) {
					log("sendMessage: "+text+" to :"+to);
					var registered=false;
					var state=null;
					try {
							registered=sharedScope.createRegistration().checkRegistration();
						} catch (e) {
							// TODO: handle exception
							sharedScope.error=e; log("error: "+e);
							state=sharedScope.FAILED;
						}
   					if(!registered || sharedScope.connection.socket.state!=sharedScope.CONNECTED){
   						state=sharedScope.FAILED;
   					}
				    if (ua === undefined) {
				        ua = new sip.UserAgent(sharedScope.connection.stack);
				        ua.remoteParty = new sip.Address(to);
				        ua.localParty = new sip.Address(sharedScope.connection.local_aor());
				        var proxy = sharedScope.registration.getRouteHeader();
				          proxy.value.uri.param['transport'] = "udp";
				          ua.routeSet = [proxy];
				    }
				    var m = ua.createRequest('MESSAGE');
				    m.setItem('Content-Type', new sip.Header("text/plain", "Content-Type"));
				    m.setBody(text);
				    m= that.getMessage(m);
					m.state=state;	
					if(m.state!=sharedScope.FAILED){
						ua.sendRequest(m);
					}
				};
				
				
				this.receivedMessage= function(ua, request){
					
					 if (request.first("Content-Type").value != "text/plain") {
					        return;
					    }
					 var m= request;
					 var from=m.first("From").value;
					 log("FROM: "+from);

							m= that.getMessage(m);
							
					 ua.sendResponse(ua.createResponse(200, 'OK'));
					 m.state=sharedScope.SENT;
					
				};
				this.receivedMessageResponse =function(ua, response) {
					
						
				    if (response.isfinal()) {
				    	var m=ua.request;
   				
  						m= that.getMessage(m);
  					
				        if (!response.is2xx()) {
				        	m.state=sharedScope.FAILED;   
				        }else{
				        	m.state=sharedScope.SENT;  
				        }
				    }
				};
    		};
    		
    		return Chat;
    	}
  ]);
});
